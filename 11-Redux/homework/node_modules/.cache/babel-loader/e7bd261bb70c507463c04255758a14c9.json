{"ast":null,"code":"var _jsxFileName = \"/Users/edgarmontenegro/Desktop/Modulo02HenryBootcamp/11-Redux/homework/src/components/Counter.js\";\nimport React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport { increment, decrement, INCREMENT, DECREMENT } from '../actions';\n\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.incrementIfOdd = () => {\n      //Implementar una función de incremento que sólo aumenta si el valor del contador es impar\n      if (this.props.count % 2 !== 0) {\n        this.props.increment();\n      }\n    };\n\n    this.incrementAsync = () => {\n      //  Implementar una función de incremento que aumenta después de esperar un segundo\n      setTimeout(this.props.increment, 2000);\n    };\n  }\n\n  render() {\n    // Completa las funciones onClick de los botones\n    // Al hacer clic en estos botones, el recuento debe disminuir o aumentar en consecuencia\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }\n    }, \"Clickeado: \", this.props.count, \" veces\", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.props.increment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }\n    }, \"+ \"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.props.decrement,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }\n    }, \"-  \"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.incrementIfOdd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }\n    }, \"incrementa si es impar\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.incrementAsync,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }\n    }, \"Incrementa despues de un segundos\"));\n  }\n\n} // La función mapStateToProps especifica qué porción del árbol de estados necesita recibir este componente.\n// En este caso, dado que nuestro store de redux sólo almacena el valor del contador,\n// este componente recibe el estado completo.\n// Sin embargo, en una aplicación redux más compleja,\n// recibiría sólo las partes relevantes que necesita del objeto de estado.\n\n\nconst mapStateToProps = state => {\n  return {\n    count: state.count\n  };\n}; // Se llama a la función de connect para que este componente conozca el resto de la arquitectura de redux.\n// Sin esto, este componente es sólo un componente tonto de React.\n//Pasamos todas las funciones que dependen de Redux, junto con el propio componente,\n// para que Redux se dé a conocer a este componente.\n\n\nexport default connect(mapStateToProps, {\n  increment,\n  decrement\n})(Counter);","map":{"version":3,"sources":["/Users/edgarmontenegro/Desktop/Modulo02HenryBootcamp/11-Redux/homework/src/components/Counter.js"],"names":["React","Component","connect","increment","decrement","INCREMENT","DECREMENT","Counter","incrementIfOdd","props","count","incrementAsync","setTimeout","render","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,SAA/B,EAA0CC,SAA1C,QAA2D,YAA3D;;AAEA,MAAMC,OAAN,SAAsBN,SAAtB,CAAgC;AAAA;AAAA;;AAAA,SAE5BO,cAF4B,GAEX,MAAM;AACrB;AACA,UAAG,KAAKC,KAAL,CAAWC,KAAX,GAAmB,CAAnB,KAAyB,CAA5B,EAA8B;AAC1B,aAAKD,KAAL,CAAWN,SAAX;AACH;AACF,KAP2B;;AAAA,SAS5BQ,cAT4B,GASX,MAAM;AACnB;AACAC,MAAAA,UAAU,CAAC,KAAKH,KAAL,CAAWN,SAAZ,EAAuB,IAAvB,CAAV;AACH,KAZ2B;AAAA;;AAc5BU,EAAAA,MAAM,GAAG;AACL;AACA;AACA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACgB,KAAKJ,KAAL,CAAWC,KAD3B,yBAEI;AAAQ,MAAA,OAAO,EAAE,KAAKD,KAAL,CAAWN,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAKI;AAAQ,MAAA,OAAO,EAAE,KAAKM,KAAL,CAAWL,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALJ,eASI;AAAQ,MAAA,OAAO,EAAE,KAAKI,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCATJ,eAYI;AAAQ,MAAA,OAAO,EAAE,KAAKG,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAZJ,CADJ;AAkBH;;AAnC2B,C,CAsChC;AACA;AACA;AACA;AACA;;;AACA,MAAMG,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHL,IAAAA,KAAK,EAAEK,KAAK,CAACL;AADV,GAAP;AAGH,CAJD,C,CAMA;AACA;AACA;AACA;;;AACA,eAAeR,OAAO,CAACY,eAAD,EAAkB;AAAEX,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAlB,CAAP,CAAmDG,OAAnD,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport { increment, decrement, INCREMENT, DECREMENT } from '../actions';\n\nclass Counter extends Component {\n    // Extra Credit\n    incrementIfOdd = () => {\n      //Implementar una función de incremento que sólo aumenta si el valor del contador es impar\n      if(this.props.count % 2 !== 0){\n          this.props.increment();\n      }\n    };\n    // Extra Credit\n    incrementAsync = () => {\n        //  Implementar una función de incremento que aumenta después de esperar un segundo\n        setTimeout(this.props.increment, 2000);\n    };\n\n    render() {\n        // Completa las funciones onClick de los botones\n        // Al hacer clic en estos botones, el recuento debe disminuir o aumentar en consecuencia\n        return (\n            <p>\n                Clickeado: {this.props.count} veces\n                <button onClick={this.props.increment}>\n                    + {/* Incremeta */}\n                </button>\n                <button onClick={this.props.decrement}>          \n                    -  {/* Decrementa */}\n                </button>\n                 {/* Si quieres hacer los extra credit puede descomentar las lineas de abajo */}\n                <button onClick={this.incrementIfOdd}>\n                    incrementa si es impar\n                </button>\n                <button onClick={this.incrementAsync}>\n                    Incrementa despues de un segundos\n                </button> \n            </p>\n        );\n    }\n}\n\n// La función mapStateToProps especifica qué porción del árbol de estados necesita recibir este componente.\n// En este caso, dado que nuestro store de redux sólo almacena el valor del contador,\n// este componente recibe el estado completo.\n// Sin embargo, en una aplicación redux más compleja,\n// recibiría sólo las partes relevantes que necesita del objeto de estado.\nconst mapStateToProps = (state) => {\n    return {\n        count: state.count\n    };\n};\n\n// Se llama a la función de connect para que este componente conozca el resto de la arquitectura de redux.\n// Sin esto, este componente es sólo un componente tonto de React.\n//Pasamos todas las funciones que dependen de Redux, junto con el propio componente,\n// para que Redux se dé a conocer a este componente.\nexport default connect(mapStateToProps, { increment, decrement })(Counter);\n"]},"metadata":{},"sourceType":"module"}